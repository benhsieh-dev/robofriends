{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundry.js","containers/App.js","serviceWorker.js","index.js"],"names":["Card","name","email","id","src","alt","Cardlist","robots","className","map","user","idx","key","SearchBox","searchChange","type","placeholder","onChange","Scroll","props","style","overflowY","border","height","children","ErrorBoundry","state","hasError","error","info","this","setState","Component","App","onSearchChange","event","searchField","target","value","fetch","then","res","json","users","filteredRobots","filter","robot","toLowerCase","includes","length","CardList","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","console","message"],"mappings":"8TAgBeA,G,kBAbF,SAAC,GAAuB,IAAtBC,EAAqB,EAArBA,KAAMC,EAAe,EAAfA,MAAOC,EAAQ,EAARA,GACxB,OACE,6BACE,yBAAKC,IAAG,+BAA0BD,EAA1B,YAAwCE,IAAI,WACpD,6BACE,4BAAKJ,GACL,2BAAIC,OCcCI,EAnBE,SAAC,GAAc,IAAbC,EAAY,EAAZA,OAEf,OACE,yBAAKC,UAAU,wDACZD,EAAOE,KAAI,SAACC,EAAMC,GACjB,OACE,kBAAC,EAAD,CACEC,IAAKD,EACLR,GAAII,EAAOI,GAAKR,GAChBF,KAAMM,EAAOI,GAAKV,KAClBC,MAAOK,EAAOI,GAAKT,aCElBW,G,MAbG,SAAC,GAAsB,IAApBC,EAAmB,EAAnBA,aACjB,OACI,yBAAKN,UAAU,OACf,2BACIA,UAAU,mCACVO,KAAK,SACLC,YAAY,gBACZC,SAAUH,OCAPI,EARA,SAACC,GACZ,OACI,yBAAKC,MAAO,CAACC,UAAW,SAAUC,OAAQ,kBAAmBC,OAAQ,UACpEJ,EAAMK,WCiBAC,E,kDAnBX,WAAYN,GAAQ,IAAD,8BACf,cAAMA,IAEDO,MAAQ,CACTC,UAAU,GAJC,E,8DAQDC,EAAOC,GACrBC,KAAKC,SAAS,CAACJ,UAAU,M,+BAGzB,OAAGG,KAAKJ,MAAMC,SACH,4CAEJG,KAAKX,MAAMK,a,GAhBCQ,aC4CZC,E,kDArCX,WAAYd,GAAQ,IAAD,8BACf,gBAOJe,eAAgB,SAACC,GACb,EAAKJ,SAAS,CAAEK,YAAaD,EAAME,OAAOC,SAP1C,EAAKZ,MAAQ,CACTnB,OAAQ,GACR6B,YAAa,IAJF,E,gEAYE,IAAD,OAChBG,MAAM,8CACHC,MAAK,SAACC,GAAD,OAASA,EAAIC,UAClBF,MAAK,SAAAG,GAAK,OAAI,EAAKZ,SAAS,CAAExB,OAAQoC,S,+BAGnC,IAAD,EAC2Bb,KAAKJ,MAA7BnB,EADH,EACGA,OAAQ6B,EADX,EACWA,YACVQ,EAAiBrC,EAAOsC,QAAO,SAAAC,GACjC,OAAOA,EAAM7C,KAAK8C,cAAcC,SAASZ,EAAYW,kBAGxD,OAAQxC,EAAO0C,OACb,yBAAKzC,UAAU,MACd,2CACA,kBAAC,EAAD,CAAWM,aAAcgB,KAAKI,iBAC9B,kBAAC,EAAD,KACI,kBAAC,EAAD,KACI,kBAACgB,EAAD,CAAU3C,OAAQqC,OANL,2C,GAzBfZ,a,MCIEmB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCRNC,IAASC,OAAQ,kBAAC,EAAD,MAASC,SAASC,eAAe,SDyH5C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBtB,MAAK,SAAAuB,GACJA,EAAaC,gBAEdC,OAAM,SAAArC,GACLsC,QAAQtC,MAAMA,EAAMuC,c","file":"static/js/main.3b3b4e0c.chunk.js","sourcesContent":["import React from 'react';\nimport './card.css'; \n\nconst Card = ({name, email, id}) => {\n    return (\n      <div>\n        <img src={`https://robohash.org/${id}?200X200`} alt=\"robots\" />\n        <div>\n          <h2>{name}</h2>\n          <p>{email}</p>\n        </div>\n      </div>\n    );\n}\n\n\nexport default Card; ","import React from 'react';\nimport './cardlist.css';\nimport Card from './Card'; \n\nconst Cardlist = ({robots}) => {\n\n    return (\n      <div className=\"tc bg-light-green dib br3 pa3 ma2 grow bw-2 shadow-5\">\n        {robots.map((user, idx) => {\n          return (\n            <Card\n              key={idx}\n              id={robots[idx].id}\n              name={robots[idx].name}\n              email={robots[idx].email}\n            />\n          );\n        })}\n      </div>\n    );\n}\n\n\nexport default Cardlist; \n","import React from 'react';\nimport './searchbox.css';\n\nconst SearchBox = ({ searchChange }) => {\n    return (\n        <div className='pa2'>\n        <input \n            className='pa3 ba b--green bg-lightest-blue' \n            type='search' \n            placeholder='search robots' \n            onChange={searchChange} \n            />\n        </div>\n    );\n}\n\nexport default SearchBox; ","import React from 'react';\n\nconst Scroll = (props) => {\n    return (\n        <div style={{overflowY: 'scroll', border: '1px solid black', height: '500px'}}>\n        {props.children}\n        </div>\n    );\n}\n\nexport default Scroll; ","import React, { Component } from 'react';\n\nclass ErrorBoundry extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            hasError: false\n        }\n    }\n\n    componentDidCatch(error, info) {\n        this.setState({hasError: true})\n    }\n    render() {\n        if(this.state.hasError) {\n            return <h1>System error</h1>\n        } \n        return this.props.children\n    }\n}\n\nexport default ErrorBoundry; ","import React, { Component } from 'react';\nimport './App.css';\nimport CardList from '../components/CardList';\n// import { robots } from './robots';\nimport SearchBox from '../components/SearchBox'; \nimport Scroll from '../components/Scroll'; \nimport ErrorBoundry from '../components/ErrorBoundry'; \n\nclass App extends Component  {\n    constructor(props) {\n        super()\n        this.state = {\n            robots: [],\n            searchField: ''\n        }\n    }\n\n    onSearchChange= (event) => {\n        this.setState({ searchField: event.target.value})\n    }\n\n    componentDidMount() {\n        fetch(\"https://jsonplaceholder.typicode.com/users\")\n          .then((res) => res.json())\n          .then(users => this.setState({ robots: users }))\n    }\n    \n    render() {\n        const { robots, searchField } = this.state; \n        const filteredRobots = robots.filter(robot => {\n            return robot.name.toLowerCase().includes(searchField.toLowerCase())\n         })\n\n         return !robots.length ? <h1>Loading</h1> : \n          (<div className='tc'>\n            <h1>Robofriends</h1>\n            <SearchBox searchChange={this.onSearchChange}/>\n            <Scroll>\n                <ErrorBoundry>\n                    <CardList robots={filteredRobots} />\n                </ErrorBoundry>\n            </Scroll>\n          </div>);\n    }\n}\n\nexport default App; ","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App';\nimport 'tachyons'; \n// import { robots } from './robots'\n// import CardList from './CardList';\n\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render( <App /> ,document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}