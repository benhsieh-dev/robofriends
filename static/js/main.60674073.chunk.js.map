{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundry.js","components/CounterButton.js","components/Header.js","containers/App.js","actions.js","constants.js","serviceWorker.js","reducers.js","index.js"],"names":["Card","name","email","id","className","src","alt","CardList","robots","map","user","i","key","SearchBox","searchChange","aria-label","type","placeholder","onChange","Scroll","props","style","overflowY","border","height","children","ErrorBoundry","state","hasError","error","info","this","setState","Component","CounterButton","updateCount","count","nextProps","nextState","color","onClick","Header","console","log","PureComponent","App","onRequestRobots","searchField","onSearchChange","isPending","filteredRobots","filter","robot","toLowerCase","includes","connect","searchRobots","requestRobots","dispatch","event","payload","target","value","fetch","then","res","json","data","catch","Boolean","window","location","hostname","match","initialStateSearch","initialStateRobots","logger","createLogger","rootReducer","combineReducers","action","Object","assign","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.60674073.chunk.js","sourcesContent":["import React from 'react';\nimport './card.css'; \n\nconst Card = ({name, email, id}) => {\n    return (\n      <div className=\"tc bg-light-green dib br3 pa3 ma2 grow bw-2 shadow-5\">\n        <img src={`https://robohash.org/${id}?size=200x200`} alt=\"robots\" />\n        <div>\n          <h2>{name}</h2>\n          <p>{email}</p>\n        </div>\n      </div>\n    );\n}\n\n\nexport default Card; ","import React from 'react';\nimport Card from './Card'; \n\n// const CardList = ({robots}) => {\n\n//     return (\n//       <div>\n//         {robots.map((user, idx) => {\n//           return (\n//             <Card\n//               key={idx}\n//               id={robots[idx].id}\n//               name={robots[idx].name}\n//               email={robots[idx].email}\n//             />\n//           );\n//         })}\n//       </div>\n//     );\n// }\n\nconst CardList = ({ robots }) => {\n  return (\n    <div>\n      {robots.map((user, i) => {\n        return (\n          <Card\n            key={i}\n            id={robots[i].id}\n            name={robots[i].name}\n            email={robots[i].email}\n          />\n        );\n      })}\n    </div>\n  );\n};\n\nexport default CardList; \n","import React from 'react';\nimport './searchbox.css';\n\nconst SearchBox = ({ searchChange }) => {\n    return (\n        <div className='pa2'>\n        <input \n            aria-label='search-robots'\n            className='pa3 ba b--green bg-lightest-blue' \n            type='search' \n            placeholder='search robots' \n            onChange={searchChange} \n            />\n        </div>\n    );\n}\n\nexport default SearchBox; ","import React from 'react';\n\nconst Scroll = (props) => {\n    return (\n        <div style={{overflowY: 'scroll', border: '1px solid black', height: '500px'}}>\n        {props.children}\n        </div>\n    );\n}\n\nexport default Scroll; ","import React, { Component } from 'react';\n\nclass ErrorBoundry extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            hasError: false\n        }\n    }\n\n    componentDidCatch(error, info) {\n        this.setState({hasError: true})\n    }\n    render() {\n        if(this.state.hasError) {\n            return <h1>System error</h1>\n        } \n        return this.props.children\n    }\n}\n\nexport default ErrorBoundry; ","import React, { Component } from 'react';\n\nclass CounterButton extends Component {\n    constructor() {\n        super();\n        this.state = {\n            count: 0\n        }\n    }\n\n    shouldComponentUpdate(nextProps, nextState) {\n        return this.state.count !== nextState.count ? true : false; \n    }\n\n    updateCount = () => {\n        this.setState(state => {\n            return {count: state.count + 1}\n        })\n    }\n\n    render() {\n        return (\n            <div>\n                <button color={this.props.color} onClick={this.updateCount}>\n                    Count: {this.state.count}\n                </button> \n            </div>\n        )\n    }\n}\n\nexport default CounterButton; ","import React, { PureComponent } from 'react';\n\nimport CounterButton from './CounterButton';\n\nclass Header extends PureComponent {\n\n    shouldComponentUpdate(nextProps, nextState) {\n        return false; \n    }\n\n    render() {\n        console.log('Header');\n        return (\n          <div>\n            <h1 className=\"f1\">RoboFriends</h1>;\n            <CounterButton color={\"red\"} />\n          </div>\n        );\n    }\n}\n\nexport default Header; ","import React, { Component } from 'react';\nimport { connect } from 'react-redux'; \nimport CardList from '../components/CardList';\nimport SearchBox from '../components/SearchBox'; \nimport Scroll from '../components/Scroll'; \nimport ErrorBoundry from '../components/ErrorBoundry'; \nimport \"./App.css\";\n\nimport { setSearchField, requestRobots } from '../actions';\nimport Header from '../components/Header';\n\nconst msp = (state) => {\n  return {\n    searchField: state.searchRobots.searchField,\n    robots: state.requestRobots.robots,\n    isPending: state.requestRobots.isPending,\n  };\n};\n\nconst mdp = (dispatch) => {\n  return {\n    onSearchChange: (event) => dispatch(setSearchField(event.target.value)),\n    onRequestRobots: () => dispatch(requestRobots()),\n  };\n};\n\n\nclass App extends Component  {\n    componentDidMount() {\n       this.props.onRequestRobots();\n    }\n    \n    render() {\n        const { searchField, onSearchChange, robots, isPending } = this.props; \n        const filteredRobots = robots.filter(robot => {\n            return robot.name.toLowerCase().includes(searchField.toLowerCase())\n         })\n\n        return (\n          <div className=\"tc\">\n            <Header />\n            <SearchBox searchChange={onSearchChange} />\n            <Scroll>\n              {isPending ? (\n                <h1>Loading</h1>\n              ) : (\n                <ErrorBoundry>\n                  <CardList robots={filteredRobots} />\n                </ErrorBoundry>\n              )}\n            </Scroll>\n          </div>\n        );\n    }\n}\n\nexport default connect(msp, mdp)(App); ","import {CHANGE_SEARCH_FIELD , REQUEST_ROBOTS_PENDING, REQUEST_ROBOTS_SUCCESS, REQUEST_ROBOTS_FAILED} from './constants'; \n\nexport const setSearchField = (text) => ({\n    type: CHANGE_SEARCH_FIELD,\n    payload: text\n});\n\nexport const requestRobots = () => (dispatch) => {\n    dispatch({type: REQUEST_ROBOTS_PENDING});\n      fetch(\"https://jsonplaceholder.typicode.com/users\")\n          .then(res => res.json())\n          .then( data => dispatch({type: REQUEST_ROBOTS_SUCCESS, payload: data}))\n          .catch( error => dispatch({type: REQUEST_ROBOTS_FAILED, payload: error}))\n}","export const CHANGE_SEARCH_FIELD = \"CHANGE_SEARCH_FIELD\";\n\nexport const REQUEST_ROBOTS_PENDING = \"REQUEST_ROBOTS_PENDING\"; \nexport const REQUEST_ROBOTS_SUCCESS = \"REQUEST_ROBOTS_SUCCESS\"; \nexport const REQUEST_ROBOTS_FAILED = \"REQUEST_ROBOTS_FAILED\"; ","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import {\n  CHANGE_SEARCH_FIELD,\n  REQUEST_ROBOTS_PENDING,\n  REQUEST_ROBOTS_SUCCESS,\n  REQUEST_ROBOTS_FAILED,\n} from \"./constants\";\n\nconst initialStateSearch = {\n    searchField: ''\n}\n\nexport const searchRobots = (state=initialStateSearch, action={}) => {\n    switch(action.type) {\n        case CHANGE_SEARCH_FIELD: \n            return Object.assign({}, state, { searchField: action.payload });\n        default:  \n            return state; \n    }\n}\n\nconst initialStateRobots = {\n    isPending: true, // changed to true from false\n    robots: [],\n    error: ''\n}\n\nexport const requestRobots = (state=initialStateRobots, action={}) => {\n    switch (action.type) {\n      case REQUEST_ROBOTS_PENDING:\n          return Object.assign({}, state, {isPending: true});\n      case REQUEST_ROBOTS_SUCCESS:\n          return Object.assign({}, state, {robots: action.payload, isPending: false})\n      case REQUEST_ROBOTS_FAILED:\n          return Object.assign({}, state, {error: action.payload, isPending: false})\n      default:\n         return state; \n    }\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware, combineReducers } from 'redux'; \nimport { createLogger } from 'redux-logger'; \nimport thunkMiddleware from 'redux-thunk';\nimport './index.css';\nimport App from './containers/App';\nimport 'tachyons'; \nimport * as serviceWorker from './serviceWorker';\nimport { searchRobots, requestRobots } from './reducers';\n\nconst logger = createLogger(); \n\nconst rootReducer = combineReducers({searchRobots, requestRobots});\n\nconst store = createStore(rootReducer, applyMiddleware(thunkMiddleware, logger));\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById(\"root\")\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}